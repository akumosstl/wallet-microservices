services:
  eureka-service:
    image: 'eureka:latest'
    restart: on-failure
    build:
      context: ./eureka-service
    environment:
      eureka.instance.hostname: eureka-service
      eureka.client.serviceUrl.defaultZone: http://eureka-service:8761/eureka/
    ports:
      - "8761:8761"
    networks:
      - bankAccount

  gateway-service:
    image: 'gateway:latest'
    restart: on-failure
    build:
      context: ./gateway-service
    ports:
      - "8180:8180"
    environment:
      eureka.client.serviceUrl.defaultZone: http://host.docker.internal:8761/eureka/
    networks:
      - bankAccount

  auth-service:
    image: 'auth:latest'
    container_name: auth
    restart: on-failure
    build:
      context: ./auth-service
    ports:
      - "9191:9191"
    environment:
      oauth.provider.issuer: http://gateway-service:8180/auth-api
      eureka.client.serviceUrl.defaultZone: http://eureka-service:8761/eureka/
      spring.datasource.url: jdbc:mysql://database:3306/akumos_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
    depends_on:
      - database
    networks:
      - bankAccount

  account-service:
    image: 'account:latest'
    container_name: account
    restart: on-failure
    build:
      context: ./account-service
    ports:
      - "8282:8282"
    environment:
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://gateway-service:8180/auth-api
      #spring.security.oauth2.resourceserver.jwt.issuer-uri: http://host.docker.internal:8180/auth-api/
      spring.kafka.bootstrap-servers: kafka:9092
      spring.kafka.producer.bootstrap-servers: kafka:9092
      spring.kafka.consumer.bootstrap-servers: kafka:9092
      eureka.client.serviceUrl.defaultZone: http://eureka-service:8761/eureka/
      spring.datasource.url: jdbc:mysql://database:3306/akumos_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
    depends_on:
      - database
      - auth-service
    networks:
      - bankAccount

  wallet-service:
    image: 'wallet:latest'
    restart: on-failure
    build:
      context: ./wallet-service
    ports:
      - "8280:8280"
    environment:
      spring.security.oauth2.resourceserver.jwt.issuer-uri:  http://gateway-service:8180/auth-api
      spring.kafka.bootstrap-servers: kafka:9092
      spring.kafka.producer.bootstrap-servers: kafka:9092
      spring.kafka.consumer.bootstrap-servers: kafka:9092
      eureka.client.serviceUrl.defaultZone: http://eureka-service:8761/eureka/
      spring.datasource.url: jdbc:mysql://database:3306/akumos_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
    depends_on:
      - database
    networks:
      - bankAccount

  transaction-service:
    image: 'transaction:latest'
    restart: on-failure
    build:
      context: ./transaction-service
    ports:
      - "8284:8284"
    environment:
      #spring.security.oauth2.resourceserver.jwt.issuer-uri: http://host.docker.internal:8180/auth-api/
      spring.kafka.bootstrap-servers: kafka:9092
      spring.kafka.producer.bootstrap-servers: kafka:9092
      spring.kafka.consumer.bootstrap-servers: kafka:9092
      eureka.client.serviceUrl.defaultZone: http://eureka-service:8761/eureka/
      spring.datasource.url: jdbc:mysql://database:3306/akumos_db?allowPublicKeyRetrieval=true&useSSL=false&createDatabaseIfNotExist=true
    depends_on:
      - database
    networks:
      - bankAccount

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: yes
    volumes:
      - "zookeeper_data:/zookeeper_data"
    networks:
      - bankAccount

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "9093:9093"
    restart: on-failure
    depends_on:
      - zookeeper
    networks:
      - bankAccount
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  database:
    image: 'mysql:latest'
    ports:
      - "3306:3306"
    restart: on-failure
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: akumos_db
    volumes:
      - db-data:/var/lib/mysql
      - ./_docker/sql:/docker-entrypoint-initdb.d
    networks:
      - bankAccount
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: on-failure
    ports:
      - "9000:9000"
    networks:
      - bankAccount
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
    depends_on:
      - kafka

volumes:
  db-data:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local

networks:
  bankAccount:
    driver: bridge